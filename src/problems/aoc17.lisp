(in-package :aoc-problems)

(defun aoc17 ()
  (let ((silver nil)
        (gold nil))
    (let ((memo-silver (make-hash-table :test #'equal))
          (memo-gold (make-hash-table :test #'equal))
          (containers (make-array 0 :adjustable t :fill-pointer 0)))
      (aoc-utils:dolines
        line *standard-input*
        (vector-push-extend (parse-integer line) containers))
      (labels
          ((runner-silver (cap cur)
             (let ((v (gethash (list cap cur) memo-silver)))
               (when v (return-from runner-silver v))
               (cond
                 ((zerop cap) (setf v 1))
                 ((>= cur (length containers)) (setf v 0))
                 (t
                  (setf v (runner-silver cap (1+ cur)))
                  (let ((c (aref containers cur)))
                    (when (<= c cap)
                      (incf v (runner-silver (- cap c) (1+ cur))))))) 
               (format t "~a ~a: ~a~%" cap cur v)
               (setf (gethash (list cap cur) memo-silver) v)))
           (runner-gold (cap cur min)
             (let ((v (gethash (list cap cur min) memo-gold)))
               (when v (return-from runner-gold v))
               (cond
                 ((zerop cap) (setf v (list 1 min)))
                 ((>= cur (length containers)) (setf v (list 0 min)))
                 (t
                  (let ((c (aref containers cur))
                        (optimal nil))
                    (push (runner-gold cap (1+ cur) min) optimal)
                    (when (<= c cap)
                      (push (runner-gold (- cap c) (1+ cur) (1+ min)) optimal))
                    (let ((best-min most-positive-fixnum)
                          (best-count 0))
                      (dolist (o optimal)
                        (cond
                          ((and (plusp (first o)) (< (second o) best-min))
                           (setf best-min (second o)
                                 best-count (first o)))
                          ((and (plusp (first o)) (= (second o) best-min))
                           (incf best-count (first o)))))
                      (if (plusp best-count)
                          (setf v (list best-count best-min))
                          (setf v (list 0 min))))))) 
               (format t "~a ~a ~a: ~a~%" cap cur min v)
               (setf (gethash (list cap cur min) memo-gold) v))))
        (setf silver (runner-silver 150 0))
        (setf gold (runner-gold 150 0 0))))
    (format *standard-output* "silver: ~a~%" silver)
    (format *standard-output* "gold: ~a~%" gold)))
