(in-package :aoc-problems)

(defun aoc16 ()
  (let ((silver nil)
        (gold nil))
    (let ((groups (aoc-utils:newline-separated-groups *standard-input*))
          (sue-stats (make-hash-table :test #'equal)))
      (dolist (stat (first groups))
        (let ((tokens (str:split ": " stat)))
          (setf (gethash (first tokens) sue-stats) (parse-integer (second tokens)))))
      (maphash #'(lambda (k v) (format t "~a ~a~%" k v)) sue-stats)
      (labels
          ((is-sue-silver (st)
             (= (parse-integer (second st)) (gethash (first st) sue-stats)))
           (is-sue-gold (st)
             (let ((value (parse-integer (second st)))
                   (real-value (gethash (first st) sue-stats)))
               (cond
                 ((some #'(lambda (x) (string= x (first st))) (list "cats" "trees"))
                  (< real-value value))
                 ((some #'(lambda (x) (string= x (first st))) (list "pomeranians" "goldfish"))
                  (> real-value value))
                 (t (= real-value value))))))
        (dolist (line (second groups))
          (let* ((split-colon (str:split ": " line :limit 2))
                 (sue-number (parse-integer (second (str:words (first split-colon)))))
                 (sub-stats (str:split ", " (second split-colon)))
                 (expanded-stats
                  (mapcar #'(lambda (s) (str:split ": " s)) sub-stats)))
            (when (every #'is-sue-silver expanded-stats)
              (setf silver sue-number))
            (when (every #'is-sue-gold expanded-stats)
              (setf gold sue-number))
            (unless (or (null silver) (null gold))
              (return)))))) 
    (format *standard-output* "silver: ~a~%" silver)
    (format *standard-output* "gold: ~a~%" gold)))
