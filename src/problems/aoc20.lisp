(in-package :aoc-problems)

(defun aoc20 ()
  (let ((silver nil)
        (gold nil))
    (let ((limit (parse-integer (read-line)))
          (n 1))
      (loop
        (let ((d 1)
              (p 0))
          (loop
           (cond
             ((> (* d d) n) (return))
             ((= (* d d) n)
              (incf p (* 10 d)))
             ((zerop (mod n d))
              (incf p (* 10 d))
              (incf p (* 10 (truncate n d)))))
           (incf d))
          (when (and (null silver) (>= p limit))
            (setf silver n)))
        (let ((d 1)
              (p 0))
          (loop
            (cond
              ((or (> (* d d) n) (> d 50)) (return))
              ((= (* d d) n)
               (incf p (* 11 d)))
              ((zerop (mod n d))
               (let ((other-d (truncate n d)))
                 (unless (> other-d 50) (incf p (* 11 d)))
                 (incf p (* 11 other-d)))))
            (incf d))
          (when (and (null gold) (>= p limit))
            (setf gold n)))
        (unless (or (null silver) (null gold))
          (return))
        (incf n 1))) 
    (format *standard-output* "silver: ~a~%" silver)
    (format *standard-output* "gold: ~a~%" gold)))
