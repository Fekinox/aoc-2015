(in-package :aoc-problems)

(defun aoc13 ()
  (let ((silver 0)
        (gold 0))
    (let ((people (make-hash-table :test #'equal))
          (happiness (make-hash-table :test #'equal))
          (permutations nil)
          (you-permutations nil))
      (aoc-utils:dolines
        line *standard-input*
        (let* ((tokens (str:words line))
               (a
                (let ((v (gethash (nth 0 tokens) people)))
                  (if v v (setf (gethash (nth 0 tokens) people) (hash-table-count people)))))
               (b 
                (let* ((token (nth 10 tokens))
                       (trimmed (subseq token 0 (1- (length token))))
                       (v (gethash trimmed people)))
                  (if v v (setf (gethash trimmed people) (hash-table-count people)))))
               (sign (if (string= (nth 2 tokens) "gain") 1 -1))
               (points (parse-integer (nth 3 tokens))))
          (setf (gethash (list a b) happiness) (* sign points))))
      (push (list (1- (hash-table-count people))) permutations)
      (dotimes (i (1- (hash-table-count people)))
        (let ((next-perms nil))
          (dolist (p permutations)
            (dotimes (j (1- (hash-table-count people)))
              (unless (some #'(lambda (y) (= y j)) p)
                (push (cons j p) next-perms))))
          (setf permutations next-perms)))
      (push (list nil) you-permutations)
      (dotimes (i (hash-table-count people))
        (let ((next-perms nil))
          (dolist (p you-permutations)
            (dotimes (j (hash-table-count people))
              (unless (some #'(lambda (y) (equalp y j)) p)
                (push (cons j p) next-perms))))
          (setf you-permutations next-perms)))
      (let ((best most-negative-fixnum))
        (dolist (p permutations)
          (let ((score 0)) 
            (dotimes (i (length p))
              (let ((left (if (= i 0) (1- (length p)) (1- i)))
                    (right (if (= i (1- (length p))) 0 (1+ i))))
                (incf score
                      (+
                        (gethash (list (nth i p) (nth right p)) happiness)
                        (gethash (list (nth i p) (nth left p)) happiness)))))
            (setf best (max best score))))
        (setf silver best))
      (let ((best most-negative-fixnum))
        (dolist (p you-permutations)
          (let ((score 0)) 
            (dotimes (i (length p))
              (let ((left (if (= i 0) (1- (length p)) (1- i)))
                    (right (if (= i (1- (length p))) 0 (1+ i))))
                (incf score
                      (+
                        (gethash (list (nth i p) (nth right p)) happiness 0)
                        (gethash (list (nth i p) (nth left p)) happiness 0)))))
            (setf best (max best score))))
        (setf gold best)))
    (format *standard-output* "silver: ~A~%" silver)
    (format *standard-output* "gold: ~A~%" gold)))
